require("dotenv").config();
const { Events, EmbedBuilder, PermissionsBitField } = require("discord.js");
const prisma = require("../utils/prismaClient");

// ‚Äî‚Äî‚Äî helpers ‚Äî‚Äî‚Äî
async function safeFetch(url, opts = {}, timeoutMs = 8000) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeoutMs);
  try {
    const res = await fetch(url, { ...opts, signal: controller.signal });
    return res;
  } finally {
    clearTimeout(id);
  }
}

function looksRussian(s = "") {
  return /[–ê-–Ø–∞-—è–Å—ë]/.test(s);
}

async function translateToRu(text) {
  if (!text || looksRussian(text)) return text;
  const bodies = JSON.stringify({
    q: text,
    source: "auto",
    target: "ru",
    format: "text",
  });
  const headers = { "Content-Type": "application/json" };
  const endpoints = [
    "https://libretranslate.com/translate",
    "https://translate.astian.org/translate",
  ];

  for (const ep of endpoints) {
    try {
      const r = await safeFetch(
        ep,
        { method: "POST", headers, body: bodies },
        9000
      );
      if (!r.ok) continue;
      const j = await r.json().catch(() => null);
      if (j?.translatedText) return j.translatedText;
    } catch (_) {}
  }
  return text;
}

async function getRandomFact() {
  try {
    const r = await safeFetch(
      "https://uselessfacts.jsph.pl/api/v2/facts/random"
    );
    if (r.ok) {
      const j = await r.json();
      if (j?.text) return j.text;
    }
  } catch (_) {}

  try {
    const r = await safeFetch("https://meowfacts.herokuapp.com/");
    if (r.ok) {
      const j = await r.json();
      if (Array.isArray(j?.data) && j.data[0]) return j.data[0];
    }
  } catch (_) {}

  try {
    const r = await safeFetch("http://numbersapi.com/random/trivia");
    if (r.ok) {
      const t = await r.text();
      if (t) return t;
    }
  } catch (_) {}

  return null;
}

module.exports = (client) => {
  client.on(Events.InteractionCreate, async (interaction) => {
    if (!interaction.isChatInputCommand()) return;

    // /ping
    if (interaction.commandName === "ping") {
      return interaction.reply({
        content: "üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ üí™",
        ephemeral: true,
      });
    }

    // /set-voice-log
    if (interaction.commandName === "set-voice-log") {
      const channel = interaction.options.getChannel("channel");
      if (!channel?.isTextBased?.()) {
        return interaction.reply({
          content: "‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª!",
          ephemeral: true,
        });
      }

      await prisma.guildConfig.upsert({
        where: { guildId: interaction.guild.id },
        update: { logChannel: channel.id },
        create: { guildId: interaction.guild.id, logChannel: channel.id },
      });

      return interaction.reply({
        content: `‚úÖ –õ–æ–≥-–∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${channel}`,
        ephemeral: true,
      });
    }

    // /disable-voice-log
    if (interaction.commandName === "disable-voice-log") {
      await prisma.guildConfig.deleteMany({
        where: { guildId: interaction.guild.id },
      });
      return interaction.reply({
        content: "üõë –õ–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
        ephemeral: true,
      });
    }

    // /fact ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ñ–∞–∫—Ç –¥–Ω—è (–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π)
    if (interaction.commandName === "fact") {
      await interaction.deferReply();
      try {
        const factEn = await getRandomFact();
        if (!factEn) {
          await interaction.editReply(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
          );
          return;
        }

        const factRu = await translateToRu(factEn);

        const embed = new EmbedBuilder()
          .setColor(0x5865f2)
          .setTitle("üìò –§–∞–∫—Ç –¥–Ω—è")
          .setDescription(factRu)
          .setFooter({
            text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${interaction.user.username}`,
            iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
          })
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/–ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–∫—Ç–∞:", err);
        await interaction.editReply(
          "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        );
      }
    }

    // üßπ /clear ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if (interaction.commandName === "clear") {
      const amount = interaction.options.getInteger("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");

      // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
      if (!interaction.member.permissions.has("ManageMessages")) {
        return interaction.reply({
          content: "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.",
          ephemeral: true,
        });
      }

      // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–∞
      if (!amount || amount < 1 || amount > 100) {
        return interaction.reply({
          content: "‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 100.",
          ephemeral: true,
        });
      }

      try {
        // 3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—É)
        const messages = await interaction.channel.messages.fetch({
          limit: amount ,
        });
        const deleted = await interaction.channel.bulkDelete(messages, true);

        const deletedCount = deleted.size > 0 ? deleted.size : 0;

        // 4Ô∏è‚É£ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await interaction.reply({
          content: `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π.`,
          ephemeral: true,
        });

        // 5Ô∏è‚É£ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
        const guildId = interaction.guild.id;
        const config = await prisma.guildConfig.findUnique({
          where: { guildId },
        });

        if (config?.logChannel) {
          const logChannel = await interaction.guild.channels
            .fetch(config.logChannel)
            .catch(() => null);
          if (logChannel) {
            const embed = new EmbedBuilder()
              .setColor(0xffcc00)
              .setTitle("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
              .setDescription(
                `**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** <@${interaction.user.id}> (${interaction.user.tag})\n` +
                  `**–ö–∞–Ω–∞–ª:** <#${interaction.channel.id}>\n` +
                  `**–£–¥–∞–ª–µ–Ω–æ:** ${deletedCount}`
              )
              .setThumbnail(
                interaction.user.displayAvatarURL({ dynamic: true })
              )
              .setTimestamp();

            await logChannel.send({ embeds: [embed] });
          }
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:", err);
        return interaction.reply({
          content:
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π –∏–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤.",
          ephemeral: true,
        });
      }
    }
  });
};
